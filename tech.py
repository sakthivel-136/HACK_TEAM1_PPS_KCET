# -*- coding: utf-8 -*-
"""tech

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Si0GNmMLTEnYNuZAXGIovPbLgIJpXOaF
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

# Load CSV file
df = pd.read_csv("tech_gadget_survey.csv")

if 'Timestamp' in df.columns:
    df = df.drop(columns=['Timestamp'])

# Rename columns robustly
df.columns = [col.strip() for col in df.columns]
df = df.rename(columns={
    [col for col in df.columns if "age group" in col.lower()][0]: 'age_group',
    [col for col in df.columns if "interested" in col.lower()][0]: 'tech_interest',
    [col for col in df.columns if "past purchase" in col.lower()][0]: 'past_purchase_behavior',
    [col for col in df.columns if "monthly income" in col.lower()][0]: 'monthly_income',
    [col for col in df.columns if "social media" in col.lower()][0]: 'social_media_engagement',
    [col for col in df.columns if "would you consider buying" in col.lower()][0]: 'will_buy'
})

# Clean values
df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

# Encode categorical variables
df['age_group'] = df['age_group'].map({
    '<18': 0, '18–24': 1, '18-24': 1, '25–34': 2, '25-34': 2,
    '35–44': 3, '35-44': 3, '45–54': 4, '45-54': 4, '55+': 5
})
df['past_purchase_behavior'] = df['past_purchase_behavior'].map({
    'Never buys new tech': 0,
    'Rarely buys new tech': 1,
    'Occasionally buys new tech': 2,
    'Often buys new tech': 3
})
df['monthly_income'] = df['monthly_income'].replace('[\₹,]', '', regex=True).astype(float)
df['will_buy'] = df['will_buy'].map({'Yes': 1, 'No': 0, 'yes': 1, 'no': 0})

# Drop missing rows
df.dropna(inplace=True)

# Features and target
X = df[['age_group', 'tech_interest', 'past_purchase_behavior', 'monthly_income', 'social_media_engagement']]
y = df['will_buy']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = LogisticRegression()
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_test)

# Metrics calculation
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, zero_division=0)
recall = recall_score(y_test, y_pred, zero_division=0)
f1 = f1_score(y_test, y_pred, zero_division=0)

# Print all metrics
print("\n✅ Classification Metrics:")
print(f"🔹 Accuracy  : {accuracy:.2f}")
print(f"🔹 Precision : {precision:.2f}")
print(f"🔹 Recall    : {recall:.2f}")
print(f"🔹 F1 Score  : {f1:.2f}")

# Optional: print detailed classification report
print("\n📊 Detailed Report:\n", classification_report(y_test, y_pred))

import joblib

# Save the trained model to a .pkl file
joblib.dump(model, "gadget_classifier_model.pkl")

print("\n✅ Model saved as gadget_classifier_model.pkl")

import joblib
import numpy as np

# Load saved model
model = joblib.load("gadget_classifier_model.pkl")

print("\n🔍 Please enter the following details (use numbers):")

# Display choices for user reference
print("""
Age Group:
  0 = <18
  1 = 18–24
  2 = 25–34
  3 = 35–44
  4 = 45–54
  5 = 55+

Past Purchase Behavior:
  0 = Never buys new tech
  1 = Rarely buys new tech
  2 = Occasionally buys new tech
  3 = Often buys new tech
""")

# User Inputs
try:
    age_group = int(input("Enter Age Group (0–5): "))
    tech_interest = int(input("Interest in Tech (1 to 5): "))
    past_purchase_behavior = int(input("Past Purchase Behavior (0–3): "))
    monthly_income = float(input("Monthly Income (₹): "))
    social_media_engagement = int(input("Social Media Tech Engagement (1 to 5): "))

    # Validate inputs
    if age_group not in range(6) or past_purchase_behavior not in range(4):
        raise ValueError("❌ Invalid choice. Age group (0–5) or past behavior (0–3) out of range.")

    # Format input
    user_data = np.array([[age_group, tech_interest, past_purchase_behavior, monthly_income, social_media_engagement]])

    # Predict
    prediction = model.predict(user_data)

    # Output
    print("\n🧠 Prediction Result:")
    print("✅ Likely to BUY the gadget." if prediction[0] == 1 else "❌ Not likely to buy the gadget.")

except Exception as e:
    print(f"\n⚠️ Error: {e}")